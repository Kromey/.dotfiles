" Kromey's .vimrc file

" Turn off vi compatible mode - this needs to be first
set nocompatible

" Clear autocmds
autocmd!

""""" SECTION 1: UI settings

" Set window title to current file
" Works just like magic when switching buffers etc. too
set title

" My preferred color scheme
"colorscheme darkblue
" Using a plugin (Solarized) now, so this has moved to after Pathogen

" I like line numbers
set nu

" Keep 5 lines between the cursor and the top or bottom of the screen
set scrolloff=5

" Set some nice character listings, then activate list
set listchars=
execute 'set listchars+=tab:\|\ '
execute 'set listchars+=trail:' . nr2char(183)
execute 'set listchars+=precedes:' . nr2char(171)
execute 'set listchars+=extends:' . nr2char(187)
set list

" Set up a more informative status line, and make it always show up as
" the next-to-last line
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]
set laststatus=2

" Show the current cursor position
" Made obsolete by the above statusline
"set ruler

" Display partially-typed commands and current mode in the status line
set showcmd
set showmode

" Short messages
set shortmess=a

" Turn off GVim's annoying toolbar
set guioptions-=T

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif


""""" SECTION 2: Editing settings

" Set indentation to be 2 spaces
"set tabstop=2
"set shiftwidth=2
"set shiftround

" Now we get to use a standard tabstop -- good riddan SuperSalon!
set tabstop=4
set shiftwidth=4
set shiftround

" Turn on C-style autoindent
"set cindent
" Don't treat '#' specially
" http://vim.wikia.com/wiki/Restoring_indent_after_typing_hash
set cinkeys-=0#
set indentkeys-=0#

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Set the default fileformat to unix <NL> line endings
set fileformats=unix,dos
set fileformat=unix

" Let's do our new files in Unicode
set encoding=utf-8
set fileencoding=utf-8

" Get our swap files out of the way
set dir=/tmp


""""" SECTION 3: Behavior customizations

" Set PHP code folding
"let php_folding=2

" Default to MySQL syntax highlighting
let sql_type_default='mysql'

" Set the current working directory to the current buffer - always
set autochdir

" Set backup options - backup on write, but don't keep the backup
set nobackup
set writebackup

" Store the last 50 commands
set history=50
" remember all of these between sessions, but only 10 search terms; also
" remember info for 10 files, but never any on removable disks, don't remember
" marks in files, don't rehighlight old search patterns, and only save up to
" 100 lines of registers; including @10 in there should restrict input buffer
" but it causes an error for me:
set viminfo=/10,'10,r/mnt/zip,r/mnt/floppy,f0,h,\"100

" Enable file type detection.
" Use the default filetype settings, so that mail gets 'tw' set to 72,
" 'cindent' is on in C files, etc.
" Also load indent files, to automatically do language-dependent indenting.
filetype plugin indent on

" Share the system clipboard
set clipboard+=unnamed

" Customize our runtimepath to pick up our plugins etc.
set runtimepath=~/.dotfiles/vim,$VIMRUNTIME
set packpath=~/.dotfiles/vim,$VIMRUNTIME

" More natural split opening
set splitbelow
set splitright


""""" SECTION 4: Customized commands

" ctags! yay!
" Look for tags file in the (document-relative) current directory, then upward
" The ';' is the magic here; see :help file-searching
set tags=./tags,tags;

" Enable mouse in normal mode only
" MOUSE BAD!
"if has('mouse')
"  set mouse=n
"endif

" Associate .tmpl files as PHP files
" (Convenient for SuperSalon development)
"au BufNewFile,BufRead *.tmpl set filetype=php

" Set line width to hard-wrap at 80 characters in Markdown files
au BufNewFile,BufRead *.md setlocal textwidth=80

" Associate .html files as Django templates
" Not going to hurt regular HTML at all, but does give us the Django stuff
au BufNewFile,BufRead *.html set filetype=htmldjango

" Handy function and convenient mapping to let me quickly turn off line
" numbering and list mode
function! ToggleVisuals()
	set list!
	set nu!
endfunction
nnoremap <C-T> :call ToggleVisuals()<CR>

" Give us a command to (temporarily) turn off search highlight
nnoremap <C-l> :nohlsearch<CR><C-l>
" Disable search highlighting when entering insert mode
autocmd InsertEnter * :setlocal nohlsearch
autocmd InsertLeave * :setlocal hlsearch

" Couple of handy Markdown editor commands
nnoremap <leader>1 yypVr=o<CR><Esc>
nnoremap <leader>2 yypVr-o<CR><Esc>
nnoremap <leader>3 yypVr^o<CR><Esc>
nnoremap <leader>4 yypVr"o<CR><Esc>

" Make blockwise indent keep your visual mode selection
vnoremap > >gv
vnoremap < <gv

" Make Y consistent with C, D
" Y normally yanks the whole line, but I use yy for that anyway
nnoremap Y y$

" Normal mode command to take the rest of the line from the cursor and put it
" on a new line previous to the current; useful for e.g. moving a comment
nnoremap <leader>P D:s/\s\+$//e<Cr>O<Esc>P==^
" Same as previous, except other way 'round
nnoremap <leader>p ^D"_ddA <Esc>p

" File-fixing:
" Functions to fix indentation and to eliminate trailing whitespace.
function! StripTrailingWhitespace()
	normal mq
	let l:oldsearch=@/
	%s/\s\+$//e
	let @/=l:oldsearch
	normal `q
endfunction
function! FixFileIndent()
	normal mq
	normal gg=G
	normal `q
endfunction
nnoremap <leader>$ :call StripTrailingWhitespace()<Cr>
nnoremap <leader>= :call FixFileIndent()<Cr>
nnoremap <leader>+ :call StripTrailingWhitespace()<Cr>:call FixFileIndent()<Cr>

" Allow pasting from unnamed buffer in insert mode after cursor
" NOTE: Doesn't work on an empty line (TODO: Why?)
inoremap <C-V> q<Esc>Plvc

" Easier split navigations
" But I use <C-L> all the time...
"nnoremap <C-J> <C-W><C-J>
"nnoremap <C-K> <C-W><C-K>
"nnoremap <C-L> <C-W><C-L>
"nnoremap <C-H> <C-W><C-H>


""""" SECTION 5: Plugin customizations

" Execute Pathogen
execute pathogen#infect()

" Solarized
syntax enable
set background=light
colorscheme solarized

augroup Racer
    autocmd!
    autocmd FileType rust nmap <buffer> gd         <Plug>(rust-def)
    autocmd FileType rust nmap <buffer> gs         <Plug>(rust-def-split)
    autocmd FileType rust nmap <buffer> gx         <Plug>(rust-def-vertical)
    "autocmd FileType rust nmap <buffer> gt         <Plug>(rust-def-tab)
    autocmd FileType rust nmap <buffer> <leader>gd <Plug>(rust-doc)
augroup END

""" NERDTree
" Set up an easier-to use abbreviation for NERDTree
"cabbr tree NERDTree

" Keybindings for PDV - Ctrl-p
"inoremap <C-P> <ESC>:call PhpDocSingle()<CR>i 
"nnoremap <C-P> :call PhpDocSingle()<CR> 
"vnoremap <C-P> :call PhpDocRange()<CR>

" Keybinding for DoxygenToolkit
let g:DoxygenToolkit_briefTag_pre = ""
inoremap <C-D> <ESC>:Dox<CR>i 
nnoremap <C-D> :Dox<CR> 
vnoremap <C-D> :Dox<CR>

